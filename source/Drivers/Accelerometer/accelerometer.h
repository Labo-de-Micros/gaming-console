//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//	@file		accelerometer.h   								//
//	@brief		Accelerometer implementation                    //
//	@author		Grupo	4										//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

#ifndef _ACCELEROMETER_H_
#define _ACCELEROMETER_H_

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//							Headers								//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

#include <stdint.h>
#include <stdbool.h>

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//		CONSTANT AND MACRO DEFINITIONS USING #DEFINE 		 	//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//			ENUMERATIONS AND STRUCTURES AND TYPEDEFS			//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

typedef enum{
	ACCELEROMETER_CONFIG_ERROR,
    ACCELEROMETER_READ_ERROR,
	ACCELEROMETER_NO_ERROR
}accelerometer_error_t;

typedef enum {
    ACCELEROMETER_ACCEL_DATA, 
    ACCELEROMETER_MAGN_DATA
} accelerometer_data_options_t;

typedef struct {
	int16_t x;
	int16_t y;
	int16_t z;
} accelerometer_raw_data_t;

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//			FUNCTION PROTOTYPES WITH GLOBAL SCOPE				//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

void accelerometer_init();
/*****************************************************************
 * @brief Function to initialize accelerometer module
 ****************************************************************/

accelerometer_raw_data_t accelerometer_get_data(accelerometer_data_options_t data_option);

/*****************************************************************
 * @brief Function to get accelerometer or magnometer data
 * @param data_option: Data option can be accelerometer or magnometer
 * @returns accelerometer_raw_data_t: Struct with the x,y,z variables.
 ****************************************************************/

#endif // _ACCELEROMETER_H_ 