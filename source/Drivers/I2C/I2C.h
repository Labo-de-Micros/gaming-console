//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//	@file		I2C.h   										//
//	@brief		I2C communication protocol driver implementation//
//	@author		Grupo	4										//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

#ifndef I2C_H_
#define I2C_H_

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//							Headers								//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

#include <stdint.h>

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//		CONSTANT AND MACRO DEFINITIONS USING #DEFINE 		 	//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

#define ADDRESS_CYCLE_BYTES 2

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//			ENUMERATIONS AND STRUCTURES AND TYPEDEFS			//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

typedef void (* pfunc) (void);

typedef enum{
         I2C_NO_FAULT = 0,
         I2C_BUS_BUSY,
         I2C_TIMEOUT,
         I2C_SLAVE_ERROR,
}I2C_FAULT;

typedef struct{
	uint8_t * data;
	uint8_t data_size; // en bytes
	uint8_t register_address;
	uint8_t slave_address;
	pfunc callback;
	I2C_FAULT fault;
}I2C_COM_CONTROL;

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//			FUNCTION PROTOTYPES WITH GLOBAL SCOPE				//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

void I2C_init(uint8_t channel);
/*****************************************************************
 * @brief Function to initialize I2C Driver module
 * @param channel: Channel of the I2C to initialize.
 ****************************************************************/

void I2C_read_msg(I2C_COM_CONTROL * i2c_comm);
/*****************************************************************
 * @brief Function to read a message from the I2C module
 * @param i2c_comm: Pointer to communication parameters.
 ****************************************************************/

void I2C_write_msg(I2C_COM_CONTROL * i2c_comm);
/*****************************************************************
 * @brief Function to write a message from the I2C module
 * @param i2c_comm: Pointer to communication parameters.
 ****************************************************************/

I2C_FAULT I2C_read_msg_blocking (uint8_t * buffer, uint8_t data_size,	uint8_t register_address, uint8_t slave_address );

I2C_FAULT I2C_write_msg_blocking (uint8_t * msg, uint8_t data_size,	uint8_t register_address, uint8_t slave_address );


#endif /* I2C_H_ */