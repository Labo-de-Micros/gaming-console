   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"gpio.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.data.gpioPtrs,"aw",%progbits
  18              		.align	2
  21              	gpioPtrs:
  22 0000 00F00F40 		.word	1074786304
  23 0004 40F00F40 		.word	1074786368
  24 0008 80F00F40 		.word	1074786432
  25 000c C0F00F40 		.word	1074786496
  26 0010 00F10F40 		.word	1074786560
  27              		.section	.data.portPtrs,"aw",%progbits
  28              		.align	2
  31              	portPtrs:
  32 0000 00900440 		.word	1074040832
  33 0004 00A00440 		.word	1074044928
  34 0008 00B00440 		.word	1074049024
  35 000c 00C00440 		.word	1074053120
  36 0010 00D00440 		.word	1074057216
  37              		.section	.data.simMasks,"aw",%progbits
  38              		.align	2
  41              	simMasks:
  42 0000 00020000 		.word	512
  43 0004 00040000 		.word	1024
  44 0008 00080000 		.word	2048
  45 000c 00100000 		.word	4096
  46 0010 00200000 		.word	8192
  47              		.section	.data.IRQn_ports,"aw",%progbits
  48              		.align	2
  51              	IRQn_ports:
  52 0000 3B000000 		.word	59
  53 0004 3C000000 		.word	60
  54 0008 3D000000 		.word	61
  55 000c 3E000000 		.word	62
  56 0010 3F000000 		.word	63
  57              		.section	.bss.pin_ports_activated,"aw",%nobits
  58              		.align	2
  61              	pin_ports_activated:
  62 0000 00000000 		.space	20
  62      00000000 
  62      00000000 
  62      00000000 
  62      00000000 
  63              		.section	.data.sim_ptr,"aw",%progbits
  64              		.align	2
  67              	sim_ptr:
  68 0000 00700440 		.word	1074032640
  69              		.section	.bss.callbacks,"aw",%nobits
  70              		.align	2
  73              	callbacks:
  74 0000 00000000 		.space	640
  74      00000000 
  74      00000000 
  74      00000000 
  74      00000000 
  75              		.section	.text.gpioMode,"ax",%progbits
  76              		.align	1
  77              		.global	gpioMode
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.fpu fpv4-sp-d16
  83              	gpioMode:
  84              	.LFB123:
  85              		.file 1 "../source/gpio.c"
   1:../source/gpio.c **** //////////////////////////////////////////////////////////////////
   2:../source/gpio.c **** //////////////////////////////////////////////////////////////////
   3:../source/gpio.c **** //	@file		gpio.c										    //
   4:../source/gpio.c **** //	@brief		Simple GPIO Pin services, similar to Arduino	//
   5:../source/gpio.c **** //	@author		Grupo	4										//
   6:../source/gpio.c **** //////////////////////////////////////////////////////////////////
   7:../source/gpio.c **** //////////////////////////////////////////////////////////////////
   8:../source/gpio.c **** 
   9:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  10:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  11:../source/gpio.c **** //							Headers								//
  12:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  13:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  14:../source/gpio.c **** 
  15:../source/gpio.c **** #include "gpio.h"
  16:../source/gpio.c **** #include "MK64F12.h"
  17:../source/gpio.c **** 
  18:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  19:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  20:../source/gpio.c **** //		CONSTANT AND MACRO DEFINITIONS USING #DEFINE 			//
  21:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  22:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  23:../source/gpio.c **** 
  24:../source/gpio.c **** #define PIN_IRQ_ENABLED		true
  25:../source/gpio.c **** #define PIN_IRQ_DISABLED	false
  26:../source/gpio.c **** #define PIN_IRQ_MASK		0x00000001
  27:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  28:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  29:../source/gpio.c **** //			ENUMERATIONS AND STRUCTURES AND TYPEDEFS	  		//
  30:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  31:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  32:../source/gpio.c **** 
  33:../source/gpio.c **** typedef void (*IRQ_callback_t)(void);
  34:../source/gpio.c **** 
  35:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  36:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  37:../source/gpio.c **** //						STATIC VARIABLES						//
  38:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  39:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  40:../source/gpio.c **** 
  41:../source/gpio.c **** static GPIO_Type* gpioPtrs[] = GPIO_BASE_PTRS;
  42:../source/gpio.c **** static PORT_Type* portPtrs[] = PORT_BASE_PTRS;
  43:../source/gpio.c **** static uint32_t simMasks[] = {SIM_SCGC5_PORTA_MASK, SIM_SCGC5_PORTB_MASK, SIM_SCGC5_PORTC_MASK, SIM
  44:../source/gpio.c **** static uint32_t IRQn_ports[] = {PORTA_IRQn, PORTB_IRQn, PORTC_IRQn, PORTD_IRQn, PORTE_IRQn};
  45:../source/gpio.c **** static uint32_t pin_ports_activated[5];
  46:../source/gpio.c **** static SIM_Type* sim_ptr = SIM;
  47:../source/gpio.c **** static IRQ_callback_t callbacks[5][32];
  48:../source/gpio.c **** 
  49:../source/gpio.c **** ////////////////////////////////////////////////////////////////
  50:../source/gpio.c **** ////////////////////////////////////////////////////////////////
  51:../source/gpio.c **** //FUNCTION PROTOTYPES FOR PRIVATE FUNCTIONS W FILE LEVEL SCOPE//
  52:../source/gpio.c **** ////////////////////////////////////////////////////////////////
  53:../source/gpio.c **** ////////////////////////////////////////////////////////////////
  54:../source/gpio.c **** 
  55:../source/gpio.c **** static	void PORT_ClearInterruptFlag(uint32_t port_num, uint32_t pin_num);
  56:../source/gpio.c **** 
  57:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  58:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  59:../source/gpio.c **** //					FUNCTION DEFINITIONS						//
  60:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  61:../source/gpio.c **** //////////////////////////////////////////////////////////////////
  62:../source/gpio.c **** 
  63:../source/gpio.c **** void gpioMode (pin_t pin, uint8_t mode){
  86              		.loc 1 63 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 24
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91 0000 80B4     		push	{r7}
  92              		.cfi_def_cfa_offset 4
  93              		.cfi_offset 7, -4
  94 0002 87B0     		sub	sp, sp, #28
  95              		.cfi_def_cfa_offset 32
  96 0004 00AF     		add	r7, sp, #0
  97              		.cfi_def_cfa_register 7
  98 0006 0346     		mov	r3, r0
  99 0008 0A46     		mov	r2, r1
 100 000a FB71     		strb	r3, [r7, #7]
 101 000c 1346     		mov	r3, r2
 102 000e BB71     		strb	r3, [r7, #6]
  64:../source/gpio.c **** /*****************************************************************
  65:../source/gpio.c ****  * @brief Configures the specified pin to behave either as an input or an output
  66:../source/gpio.c ****  * @param pin the pin whose mode you wish to set (according PORTNUM2PIN)
  67:../source/gpio.c ****  * @param mode INPUT, OUTPUT, INPUT_PULLUP or INPUT_PULLDOWN.
  68:../source/gpio.c ****  *****************************************************************/
  69:../source/gpio.c **** 	sim_ptr->SCGC5 |= simMasks[PIN2PORT(pin)]; // activo clock gating
 103              		.loc 1 69 0
 104 0010 544B     		ldr	r3, .L10
 105 0012 1B68     		ldr	r3, [r3]
 106 0014 03F58153 		add	r3, r3, #4128
 107 0018 1833     		adds	r3, r3, #24
 108 001a 1968     		ldr	r1, [r3]
 109 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 110 001e 5B09     		lsrs	r3, r3, #5
 111 0020 DBB2     		uxtb	r3, r3
 112 0022 03F00703 		and	r3, r3, #7
 113 0026 504A     		ldr	r2, .L10+4
 114 0028 52F82320 		ldr	r2, [r2, r3, lsl #2]
 115 002c 4D4B     		ldr	r3, .L10
 116 002e 1B68     		ldr	r3, [r3]
 117 0030 0A43     		orrs	r2, r2, r1
 118 0032 03F58153 		add	r3, r3, #4128
 119 0036 1833     		adds	r3, r3, #24
 120 0038 1A60     		str	r2, [r3]
  70:../source/gpio.c **** 	PORT_Type *port = portPtrs[PIN2PORT(pin)];
 121              		.loc 1 70 0
 122 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 123 003c 5B09     		lsrs	r3, r3, #5
 124 003e DBB2     		uxtb	r3, r3
 125 0040 03F00703 		and	r3, r3, #7
 126 0044 494A     		ldr	r2, .L10+8
 127 0046 52F82330 		ldr	r3, [r2, r3, lsl #2]
 128 004a 7B61     		str	r3, [r7, #20]
  71:../source/gpio.c **** 	GPIO_Type *gpio = gpioPtrs[PIN2PORT(pin)];
 129              		.loc 1 71 0
 130 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 131 004e 5B09     		lsrs	r3, r3, #5
 132 0050 DBB2     		uxtb	r3, r3
 133 0052 03F00703 		and	r3, r3, #7
 134 0056 464A     		ldr	r2, .L10+12
 135 0058 52F82330 		ldr	r3, [r2, r3, lsl #2]
 136 005c 3B61     		str	r3, [r7, #16]
  72:../source/gpio.c **** 	uint32_t num = PIN2NUM(pin); // num es el numero de pin
 137              		.loc 1 72 0
 138 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 139 0060 03F01F03 		and	r3, r3, #31
 140 0064 FB60     		str	r3, [r7, #12]
  73:../source/gpio.c **** 
  74:../source/gpio.c **** 	// connect to gpio (hay un PCR por pin)
  75:../source/gpio.c **** 	port->PCR[num] = 0x00;
 141              		.loc 1 75 0
 142 0066 7B69     		ldr	r3, [r7, #20]
 143 0068 FA68     		ldr	r2, [r7, #12]
 144 006a 0021     		movs	r1, #0
 145 006c 43F82210 		str	r1, [r3, r2, lsl #2]
  76:../source/gpio.c **** 	port->PCR[num] |= PORT_PCR_MUX(1);
 146              		.loc 1 76 0
 147 0070 7B69     		ldr	r3, [r7, #20]
 148 0072 FA68     		ldr	r2, [r7, #12]
 149 0074 53F82230 		ldr	r3, [r3, r2, lsl #2]
 150 0078 43F48071 		orr	r1, r3, #256
 151 007c 7B69     		ldr	r3, [r7, #20]
 152 007e FA68     		ldr	r2, [r7, #12]
 153 0080 43F82210 		str	r1, [r3, r2, lsl #2]
  77:../source/gpio.c **** 	port->PCR[num] |= PORT_PCR_IRQC(0);
 154              		.loc 1 77 0
 155 0084 7B69     		ldr	r3, [r7, #20]
 156 0086 FA68     		ldr	r2, [r7, #12]
 157 0088 53F82210 		ldr	r1, [r3, r2, lsl #2]
 158 008c 7B69     		ldr	r3, [r7, #20]
 159 008e FA68     		ldr	r2, [r7, #12]
 160 0090 43F82210 		str	r1, [r3, r2, lsl #2]
  78:../source/gpio.c **** 	switch(mode){
 161              		.loc 1 78 0
 162 0094 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 163 0096 032B     		cmp	r3, #3
 164 0098 5ED8     		bhi	.L9
 165 009a 01A2     		adr	r2, .L4
 166 009c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 167              		.p2align 2
 168              	.L4:
 169 00a0 B1000000 		.word	.L3+1
 170 00a4 C7000000 		.word	.L5+1
 171 00a8 DB000000 		.word	.L6+1
 172 00ac 19010000 		.word	.L7+1
 173              		.p2align 1
 174              	.L3:
  79:../source/gpio.c **** 		case INPUT:
  80:../source/gpio.c **** 			gpio->PDDR &= ~ (1<<num); // seteamos el pin como input
 175              		.loc 1 80 0
 176 00b0 3B69     		ldr	r3, [r7, #16]
 177 00b2 5B69     		ldr	r3, [r3, #20]
 178 00b4 0121     		movs	r1, #1
 179 00b6 FA68     		ldr	r2, [r7, #12]
 180 00b8 01FA02F2 		lsl	r2, r1, r2
 181 00bc D243     		mvns	r2, r2
 182 00be 1A40     		ands	r2, r2, r3
 183 00c0 3B69     		ldr	r3, [r7, #16]
 184 00c2 5A61     		str	r2, [r3, #20]
  81:../source/gpio.c **** 			break;
 185              		.loc 1 81 0
 186 00c4 47E0     		b	.L2
 187              	.L5:
  82:../source/gpio.c **** 		case OUTPUT:
  83:../source/gpio.c **** 			gpio->PDDR |= 1<<num;// seteamos el pin como output
 188              		.loc 1 83 0
 189 00c6 3B69     		ldr	r3, [r7, #16]
 190 00c8 5B69     		ldr	r3, [r3, #20]
 191 00ca 0121     		movs	r1, #1
 192 00cc FA68     		ldr	r2, [r7, #12]
 193 00ce 01FA02F2 		lsl	r2, r1, r2
 194 00d2 1A43     		orrs	r2, r2, r3
 195 00d4 3B69     		ldr	r3, [r7, #16]
 196 00d6 5A61     		str	r2, [r3, #20]
  84:../source/gpio.c **** 			break;
 197              		.loc 1 84 0
 198 00d8 3DE0     		b	.L2
 199              	.L6:
  85:../source/gpio.c **** 		case INPUT_PULLUP:
  86:../source/gpio.c **** 			gpio->PDDR &= ~ (1<<num); // seteamos el pin como input
 200              		.loc 1 86 0
 201 00da 3B69     		ldr	r3, [r7, #16]
 202 00dc 5B69     		ldr	r3, [r3, #20]
 203 00de 0121     		movs	r1, #1
 204 00e0 FA68     		ldr	r2, [r7, #12]
 205 00e2 01FA02F2 		lsl	r2, r1, r2
 206 00e6 D243     		mvns	r2, r2
 207 00e8 1A40     		ands	r2, r2, r3
 208 00ea 3B69     		ldr	r3, [r7, #16]
 209 00ec 5A61     		str	r2, [r3, #20]
  87:../source/gpio.c **** 			port->PCR[num] |= HIGH<<1; //PULL ENABLE en 1
 210              		.loc 1 87 0
 211 00ee 7B69     		ldr	r3, [r7, #20]
 212 00f0 FA68     		ldr	r2, [r7, #12]
 213 00f2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 214 00f6 43F00201 		orr	r1, r3, #2
 215 00fa 7B69     		ldr	r3, [r7, #20]
 216 00fc FA68     		ldr	r2, [r7, #12]
 217 00fe 43F82210 		str	r1, [r3, r2, lsl #2]
  88:../source/gpio.c **** 			port->PCR[num] |= HIGH<<0; //PULL SELECT en 1 (PULLUP)
 218              		.loc 1 88 0
 219 0102 7B69     		ldr	r3, [r7, #20]
 220 0104 FA68     		ldr	r2, [r7, #12]
 221 0106 53F82230 		ldr	r3, [r3, r2, lsl #2]
 222 010a 43F00101 		orr	r1, r3, #1
 223 010e 7B69     		ldr	r3, [r7, #20]
 224 0110 FA68     		ldr	r2, [r7, #12]
 225 0112 43F82210 		str	r1, [r3, r2, lsl #2]
  89:../source/gpio.c **** 			break;
 226              		.loc 1 89 0
 227 0116 1EE0     		b	.L2
 228              	.L7:
  90:../source/gpio.c **** 		case INPUT_PULLDOWN:
  91:../source/gpio.c **** 			gpio->PDDR &= ~ (1<<num); // seteamos el pin como input
 229              		.loc 1 91 0
 230 0118 3B69     		ldr	r3, [r7, #16]
 231 011a 5B69     		ldr	r3, [r3, #20]
 232 011c 0121     		movs	r1, #1
 233 011e FA68     		ldr	r2, [r7, #12]
 234 0120 01FA02F2 		lsl	r2, r1, r2
 235 0124 D243     		mvns	r2, r2
 236 0126 1A40     		ands	r2, r2, r3
 237 0128 3B69     		ldr	r3, [r7, #16]
 238 012a 5A61     		str	r2, [r3, #20]
  92:../source/gpio.c **** 			port->PCR[num] |= HIGH<<1; //PULL ENABLE en 1
 239              		.loc 1 92 0
 240 012c 7B69     		ldr	r3, [r7, #20]
 241 012e FA68     		ldr	r2, [r7, #12]
 242 0130 53F82230 		ldr	r3, [r3, r2, lsl #2]
 243 0134 43F00201 		orr	r1, r3, #2
 244 0138 7B69     		ldr	r3, [r7, #20]
 245 013a FA68     		ldr	r2, [r7, #12]
 246 013c 43F82210 		str	r1, [r3, r2, lsl #2]
  93:../source/gpio.c **** 			port->PCR[num] &= ~(HIGH<<0); //PULL SELECT en 0 (PULLDOWN)
 247              		.loc 1 93 0
 248 0140 7B69     		ldr	r3, [r7, #20]
 249 0142 FA68     		ldr	r2, [r7, #12]
 250 0144 53F82230 		ldr	r3, [r3, r2, lsl #2]
 251 0148 23F00101 		bic	r1, r3, #1
 252 014c 7B69     		ldr	r3, [r7, #20]
 253 014e FA68     		ldr	r2, [r7, #12]
 254 0150 43F82210 		str	r1, [r3, r2, lsl #2]
  94:../source/gpio.c **** 			break;
 255              		.loc 1 94 0
 256 0154 00BF     		nop
 257              	.L2:
  95:../source/gpio.c **** 	}
  96:../source/gpio.c **** 	return;
 258              		.loc 1 96 0
 259 0156 00BF     		nop
 260              	.L9:
 261 0158 00BF     		nop
  97:../source/gpio.c **** }
 262              		.loc 1 97 0
 263 015a 1C37     		adds	r7, r7, #28
 264              		.cfi_def_cfa_offset 4
 265 015c BD46     		mov	sp, r7
 266              		.cfi_def_cfa_register 13
 267              		@ sp needed
 268 015e 5DF8047B 		ldr	r7, [sp], #4
 269              		.cfi_restore 7
 270              		.cfi_def_cfa_offset 0
 271 0162 7047     		bx	lr
 272              	.L11:
 273              		.align	2
 274              	.L10:
 275 0164 00000000 		.word	sim_ptr
 276 0168 00000000 		.word	simMasks
 277 016c 00000000 		.word	portPtrs
 278 0170 00000000 		.word	gpioPtrs
 279              		.cfi_endproc
 280              	.LFE123:
 282              		.section	.text.gpioWrite,"ax",%progbits
 283              		.align	1
 284              		.global	gpioWrite
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 288              		.fpu fpv4-sp-d16
 290              	gpioWrite:
 291              	.LFB124:
  98:../source/gpio.c **** 
  99:../source/gpio.c **** void gpioWrite (pin_t pin, bool value){
 292              		.loc 1 99 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 24
 295              		@ frame_needed = 1, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 297 0000 80B4     		push	{r7}
 298              		.cfi_def_cfa_offset 4
 299              		.cfi_offset 7, -4
 300 0002 87B0     		sub	sp, sp, #28
 301              		.cfi_def_cfa_offset 32
 302 0004 00AF     		add	r7, sp, #0
 303              		.cfi_def_cfa_register 7
 304 0006 0346     		mov	r3, r0
 305 0008 0A46     		mov	r2, r1
 306 000a FB71     		strb	r3, [r7, #7]
 307 000c 1346     		mov	r3, r2
 308 000e BB71     		strb	r3, [r7, #6]
 100:../source/gpio.c **** /*****************************************************************
 101:../source/gpio.c ****  * @brief Write a HIGH or a LOW value to a digital pin
 102:../source/gpio.c ****  * @param pin the pin to write (according PORTNUM2PIN)
 103:../source/gpio.c ****  * @param val Desired value (HIGH or LOW)
 104:../source/gpio.c ****  *****************************************************************/
 105:../source/gpio.c **** 	uint32_t port_name = PIN2PORT(pin);
 309              		.loc 1 105 0
 310 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 311 0012 5B09     		lsrs	r3, r3, #5
 312 0014 DBB2     		uxtb	r3, r3
 313 0016 03F00703 		and	r3, r3, #7
 314 001a 7B61     		str	r3, [r7, #20]
 106:../source/gpio.c **** 	uint32_t num = PIN2NUM(pin);
 315              		.loc 1 106 0
 316 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 317 001e 03F01F03 		and	r3, r3, #31
 318 0022 3B61     		str	r3, [r7, #16]
 107:../source/gpio.c **** 	GPIO_Type *gpio = gpioPtrs[port_name];
 319              		.loc 1 107 0
 320 0024 104A     		ldr	r2, .L16
 321 0026 7B69     		ldr	r3, [r7, #20]
 322 0028 52F82330 		ldr	r3, [r2, r3, lsl #2]
 323 002c FB60     		str	r3, [r7, #12]
 108:../source/gpio.c **** 	if(value == HIGH)
 324              		.loc 1 108 0
 325 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 326 0030 002B     		cmp	r3, #0
 327 0032 09D0     		beq	.L13
 109:../source/gpio.c **** 		gpio->PDOR |= (1<<num);
 328              		.loc 1 109 0
 329 0034 FB68     		ldr	r3, [r7, #12]
 330 0036 1B68     		ldr	r3, [r3]
 331 0038 0121     		movs	r1, #1
 332 003a 3A69     		ldr	r2, [r7, #16]
 333 003c 01FA02F2 		lsl	r2, r1, r2
 334 0040 1A43     		orrs	r2, r2, r3
 335 0042 FB68     		ldr	r3, [r7, #12]
 336 0044 1A60     		str	r2, [r3]
 110:../source/gpio.c **** 	else
 111:../source/gpio.c **** 		gpio->PDOR &= ~ (1<<num);
 112:../source/gpio.c **** }
 337              		.loc 1 112 0
 338 0046 09E0     		b	.L15
 339              	.L13:
 111:../source/gpio.c **** }
 340              		.loc 1 111 0
 341 0048 FB68     		ldr	r3, [r7, #12]
 342 004a 1B68     		ldr	r3, [r3]
 343 004c 0121     		movs	r1, #1
 344 004e 3A69     		ldr	r2, [r7, #16]
 345 0050 01FA02F2 		lsl	r2, r1, r2
 346 0054 D243     		mvns	r2, r2
 347 0056 1A40     		ands	r2, r2, r3
 348 0058 FB68     		ldr	r3, [r7, #12]
 349 005a 1A60     		str	r2, [r3]
 350              	.L15:
 351              		.loc 1 112 0
 352 005c 00BF     		nop
 353 005e 1C37     		adds	r7, r7, #28
 354              		.cfi_def_cfa_offset 4
 355 0060 BD46     		mov	sp, r7
 356              		.cfi_def_cfa_register 13
 357              		@ sp needed
 358 0062 5DF8047B 		ldr	r7, [sp], #4
 359              		.cfi_restore 7
 360              		.cfi_def_cfa_offset 0
 361 0066 7047     		bx	lr
 362              	.L17:
 363              		.align	2
 364              	.L16:
 365 0068 00000000 		.word	gpioPtrs
 366              		.cfi_endproc
 367              	.LFE124:
 369              		.section	.text.gpioToggle,"ax",%progbits
 370              		.align	1
 371              		.global	gpioToggle
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu fpv4-sp-d16
 377              	gpioToggle:
 378              	.LFB125:
 113:../source/gpio.c **** 
 114:../source/gpio.c **** void gpioToggle (pin_t pin){
 379              		.loc 1 114 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 16
 382              		@ frame_needed = 1, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 384 0000 80B4     		push	{r7}
 385              		.cfi_def_cfa_offset 4
 386              		.cfi_offset 7, -4
 387 0002 85B0     		sub	sp, sp, #20
 388              		.cfi_def_cfa_offset 24
 389 0004 00AF     		add	r7, sp, #0
 390              		.cfi_def_cfa_register 7
 391 0006 0346     		mov	r3, r0
 392 0008 FB71     		strb	r3, [r7, #7]
 115:../source/gpio.c **** /*****************************************************************
 116:../source/gpio.c ****  * @brief Toggle the value of a digital pin (HIGH<->LOW)
 117:../source/gpio.c ****  * @param pin the pin to toggle (according PORTNUM2PIN)
 118:../source/gpio.c ****  *****************************************************************/
 119:../source/gpio.c **** 	GPIO_Type *gpio = gpioPtrs[PIN2PORT(pin)];
 393              		.loc 1 119 0
 394 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 395 000c 5B09     		lsrs	r3, r3, #5
 396 000e DBB2     		uxtb	r3, r3
 397 0010 03F00703 		and	r3, r3, #7
 398 0014 0A4A     		ldr	r2, .L19
 399 0016 52F82330 		ldr	r3, [r2, r3, lsl #2]
 400 001a FB60     		str	r3, [r7, #12]
 120:../source/gpio.c **** 	gpio->PTOR |= (1<<PIN2NUM(pin));
 401              		.loc 1 120 0
 402 001c FB68     		ldr	r3, [r7, #12]
 403 001e DB68     		ldr	r3, [r3, #12]
 404 0020 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 405 0022 02F01F02 		and	r2, r2, #31
 406 0026 0121     		movs	r1, #1
 407 0028 01FA02F2 		lsl	r2, r1, r2
 408 002c 1A43     		orrs	r2, r2, r3
 409 002e FB68     		ldr	r3, [r7, #12]
 410 0030 DA60     		str	r2, [r3, #12]
 121:../source/gpio.c **** }
 411              		.loc 1 121 0
 412 0032 00BF     		nop
 413 0034 1437     		adds	r7, r7, #20
 414              		.cfi_def_cfa_offset 4
 415 0036 BD46     		mov	sp, r7
 416              		.cfi_def_cfa_register 13
 417              		@ sp needed
 418 0038 5DF8047B 		ldr	r7, [sp], #4
 419              		.cfi_restore 7
 420              		.cfi_def_cfa_offset 0
 421 003c 7047     		bx	lr
 422              	.L20:
 423 003e 00BF     		.align	2
 424              	.L19:
 425 0040 00000000 		.word	gpioPtrs
 426              		.cfi_endproc
 427              	.LFE125:
 429              		.section	.text.gpioRead,"ax",%progbits
 430              		.align	1
 431              		.global	gpioRead
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu fpv4-sp-d16
 437              	gpioRead:
 438              	.LFB126:
 122:../source/gpio.c **** 
 123:../source/gpio.c **** bool gpioRead (pin_t pin){
 439              		.loc 1 123 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 24
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444 0000 80B4     		push	{r7}
 445              		.cfi_def_cfa_offset 4
 446              		.cfi_offset 7, -4
 447 0002 87B0     		sub	sp, sp, #28
 448              		.cfi_def_cfa_offset 32
 449 0004 00AF     		add	r7, sp, #0
 450              		.cfi_def_cfa_register 7
 451 0006 0346     		mov	r3, r0
 452 0008 FB71     		strb	r3, [r7, #7]
 124:../source/gpio.c **** /*****************************************************************
 125:../source/gpio.c ****  * @brief Reads the value from a specified digital pin, either HIGH or LOW.
 126:../source/gpio.c ****  * @param pin the pin to read (according PORTNUM2PIN)
 127:../source/gpio.c ****  * @return HIGH or LOW
 128:../source/gpio.c ****  *****************************************************************/
 129:../source/gpio.c **** 	uint32_t port_name = PIN2PORT(pin);
 453              		.loc 1 129 0
 454 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 455 000c 5B09     		lsrs	r3, r3, #5
 456 000e DBB2     		uxtb	r3, r3
 457 0010 03F00703 		and	r3, r3, #7
 458 0014 7B61     		str	r3, [r7, #20]
 130:../source/gpio.c **** 	uint32_t num = PIN2NUM(pin);
 459              		.loc 1 130 0
 460 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 461 0018 03F01F03 		and	r3, r3, #31
 462 001c 3B61     		str	r3, [r7, #16]
 131:../source/gpio.c **** 	GPIO_Type *gpio = gpioPtrs[port_name];
 463              		.loc 1 131 0
 464 001e 0E4A     		ldr	r2, .L23
 465 0020 7B69     		ldr	r3, [r7, #20]
 466 0022 52F82330 		ldr	r3, [r2, r3, lsl #2]
 467 0026 FB60     		str	r3, [r7, #12]
 132:../source/gpio.c **** 	return ( (1<<num) & gpio->PDIR ) == 1<<num;
 468              		.loc 1 132 0
 469 0028 0122     		movs	r2, #1
 470 002a 3B69     		ldr	r3, [r7, #16]
 471 002c 02FA03F3 		lsl	r3, r2, r3
 472 0030 1A46     		mov	r2, r3
 473 0032 FB68     		ldr	r3, [r7, #12]
 474 0034 1B69     		ldr	r3, [r3, #16]
 475 0036 1340     		ands	r3, r3, r2
 476 0038 0121     		movs	r1, #1
 477 003a 3A69     		ldr	r2, [r7, #16]
 478 003c 01FA02F2 		lsl	r2, r1, r2
 479 0040 9342     		cmp	r3, r2
 480 0042 0CBF     		ite	eq
 481 0044 0123     		moveq	r3, #1
 482 0046 0023     		movne	r3, #0
 483 0048 DBB2     		uxtb	r3, r3
 133:../source/gpio.c **** }
 484              		.loc 1 133 0
 485 004a 1846     		mov	r0, r3
 486 004c 1C37     		adds	r7, r7, #28
 487              		.cfi_def_cfa_offset 4
 488 004e BD46     		mov	sp, r7
 489              		.cfi_def_cfa_register 13
 490              		@ sp needed
 491 0050 5DF8047B 		ldr	r7, [sp], #4
 492              		.cfi_restore 7
 493              		.cfi_def_cfa_offset 0
 494 0054 7047     		bx	lr
 495              	.L24:
 496 0056 00BF     		.align	2
 497              	.L23:
 498 0058 00000000 		.word	gpioPtrs
 499              		.cfi_endproc
 500              	.LFE126:
 502              		.section	.rodata
 503              		.align	2
 504              	.LC0:
 505 0000 00900440 		.word	1074040832
 506 0004 00A00440 		.word	1074044928
 507 0008 00B00440 		.word	1074049024
 508 000c 00C00440 		.word	1074053120
 509 0010 00D00440 		.word	1074057216
 510              		.section	.text.gpioIRQ,"ax",%progbits
 511              		.align	1
 512              		.global	gpioIRQ
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu fpv4-sp-d16
 518              	gpioIRQ:
 519              	.LFB127:
 134:../source/gpio.c **** 
 135:../source/gpio.c **** bool gpioIRQ (pin_t pin, uint8_t irqMode, pinIrqFun_t irqFun){
 520              		.loc 1 135 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 40
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524 0000 B0B5     		push	{r4, r5, r7, lr}
 525              		.cfi_def_cfa_offset 16
 526              		.cfi_offset 4, -16
 527              		.cfi_offset 5, -12
 528              		.cfi_offset 7, -8
 529              		.cfi_offset 14, -4
 530 0002 8AB0     		sub	sp, sp, #40
 531              		.cfi_def_cfa_offset 56
 532 0004 00AF     		add	r7, sp, #0
 533              		.cfi_def_cfa_register 7
 534 0006 0346     		mov	r3, r0
 535 0008 3A60     		str	r2, [r7]
 536 000a FB71     		strb	r3, [r7, #7]
 537 000c 0B46     		mov	r3, r1
 538 000e BB71     		strb	r3, [r7, #6]
 136:../source/gpio.c **** /*****************************************************************
 137:../source/gpio.c ****  * @brief Configures how the pin reacts when an IRQ event ocurrs
 138:../source/gpio.c ****  * @param pin the pin whose IRQ mode you wish to set (according PORTNUM2PIN)
 139:../source/gpio.c ****  * @param irqMode disable, risingEdge, fallingEdge or bothEdges
 140:../source/gpio.c ****  * @param irqFun function to call on pin event
 141:../source/gpio.c ****  * @return Registration succeed
 142:../source/gpio.c ****  *****************************************************************/
 143:../source/gpio.c **** 	uint32_t port_num = PIN2PORT(pin);
 539              		.loc 1 143 0
 540 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 541 0012 5B09     		lsrs	r3, r3, #5
 542 0014 DBB2     		uxtb	r3, r3
 543 0016 03F00703 		and	r3, r3, #7
 544 001a 7B62     		str	r3, [r7, #36]
 144:../source/gpio.c **** 	uint32_t pin_num = PIN2NUM(pin);
 545              		.loc 1 144 0
 546 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 547 001e 03F01F03 		and	r3, r3, #31
 548 0022 3B62     		str	r3, [r7, #32]
 145:../source/gpio.c **** 	pin_ports_activated[port_num] |= PIN_IRQ_MASK<<pin_num;
 549              		.loc 1 145 0
 550 0024 4D4A     		ldr	r2, .L36
 551 0026 7B6A     		ldr	r3, [r7, #36]
 552 0028 52F82330 		ldr	r3, [r2, r3, lsl #2]
 553 002c 0121     		movs	r1, #1
 554 002e 3A6A     		ldr	r2, [r7, #32]
 555 0030 01FA02F2 		lsl	r2, r1, r2
 556 0034 1A43     		orrs	r2, r2, r3
 557 0036 4949     		ldr	r1, .L36
 558 0038 7B6A     		ldr	r3, [r7, #36]
 559 003a 41F82320 		str	r2, [r1, r3, lsl #2]
 146:../source/gpio.c **** 	callbacks[port_num][pin_num] = irqFun;
 560              		.loc 1 146 0
 561 003e 4849     		ldr	r1, .L36+4
 562 0040 7B6A     		ldr	r3, [r7, #36]
 563 0042 5A01     		lsls	r2, r3, #5
 564 0044 3B6A     		ldr	r3, [r7, #32]
 565 0046 1344     		add	r3, r3, r2
 566 0048 3A68     		ldr	r2, [r7]
 567 004a 41F82320 		str	r2, [r1, r3, lsl #2]
 147:../source/gpio.c **** 	PORT_Type * addr_arrays[] = PORT_BASE_PTRS;
 568              		.loc 1 147 0
 569 004e 454B     		ldr	r3, .L36+8
 570 0050 07F10804 		add	r4, r7, #8
 571 0054 1D46     		mov	r5, r3
 572 0056 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 573 0058 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 574 005a 2B68     		ldr	r3, [r5]
 575 005c 2360     		str	r3, [r4]
 148:../source/gpio.c **** 	PORT_Type * port = addr_arrays[port_num];
 576              		.loc 1 148 0
 577 005e 7B6A     		ldr	r3, [r7, #36]
 578 0060 9B00     		lsls	r3, r3, #2
 579 0062 07F12802 		add	r2, r7, #40
 580 0066 1344     		add	r3, r3, r2
 581 0068 53F8203C 		ldr	r3, [r3, #-32]
 582 006c FB61     		str	r3, [r7, #28]
 149:../source/gpio.c **** 
 150:../source/gpio.c **** 	__NVIC_EnableIRQ(IRQn_ports[port_num]);
 583              		.loc 1 150 0
 584 006e 3E4A     		ldr	r2, .L36+12
 585 0070 7B6A     		ldr	r3, [r7, #36]
 586 0072 52F82330 		ldr	r3, [r2, r3, lsl #2]
 587 0076 1846     		mov	r0, r3
 588 0078 FFF7FEFF 		bl	__NVIC_EnableIRQ
 151:../source/gpio.c **** 	__NVIC_ClearPendingIRQ(IRQn_ports[port_num]);
 589              		.loc 1 151 0
 590 007c 3A4A     		ldr	r2, .L36+12
 591 007e 7B6A     		ldr	r3, [r7, #36]
 592 0080 52F82330 		ldr	r3, [r2, r3, lsl #2]
 593 0084 1846     		mov	r0, r3
 594 0086 FFF7FEFF 		bl	__NVIC_ClearPendingIRQ
 152:../source/gpio.c **** 	__NVIC_SetPriority(IRQn_ports[port_num], 3);
 595              		.loc 1 152 0
 596 008a 374A     		ldr	r2, .L36+12
 597 008c 7B6A     		ldr	r3, [r7, #36]
 598 008e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 599 0092 0321     		movs	r1, #3
 600 0094 1846     		mov	r0, r3
 601 0096 FFF7FEFF 		bl	__NVIC_SetPriority
 153:../source/gpio.c **** 	//Set the corresponding IRQC
 154:../source/gpio.c **** 	switch(irqMode){
 602              		.loc 1 154 0
 603 009a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 604 009c 042B     		cmp	r3, #4
 605 009e 56D8     		bhi	.L35
 606 00a0 01A2     		adr	r2, .L28
 607 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 608 00a6 00BF     		.p2align 2
 609              	.L28:
 610 00a8 BD000000 		.word	.L27+1
 611 00ac D1000000 		.word	.L29+1
 612 00b0 FB000000 		.word	.L30+1
 613 00b4 25010000 		.word	.L31+1
 614 00b8 4F010000 		.word	.L35+1
 615              		.p2align 1
 616              	.L27:
 155:../source/gpio.c **** 			case GPIO_IRQ_MODE_DISABLE:
 156:../source/gpio.c **** 				port->PCR[pin_num] &= ~(0b1111 << PORT_PCR_IRQC_SHIFT);
 617              		.loc 1 156 0
 618 00bc FB69     		ldr	r3, [r7, #28]
 619 00be 3A6A     		ldr	r2, [r7, #32]
 620 00c0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 621 00c4 23F47021 		bic	r1, r3, #983040
 622 00c8 FB69     		ldr	r3, [r7, #28]
 623 00ca 3A6A     		ldr	r2, [r7, #32]
 624 00cc 43F82210 		str	r1, [r3, r2, lsl #2]
 625              	.L29:
 157:../source/gpio.c **** 			case GPIO_IRQ_MODE_RISING_EDGE:
 158:../source/gpio.c **** 				port->PCR[pin_num] &= ~(0b1111 << PORT_PCR_IRQC_SHIFT);
 626              		.loc 1 158 0
 627 00d0 FB69     		ldr	r3, [r7, #28]
 628 00d2 3A6A     		ldr	r2, [r7, #32]
 629 00d4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 630 00d8 23F47021 		bic	r1, r3, #983040
 631 00dc FB69     		ldr	r3, [r7, #28]
 632 00de 3A6A     		ldr	r2, [r7, #32]
 633 00e0 43F82210 		str	r1, [r3, r2, lsl #2]
 159:../source/gpio.c **** 				port->PCR[pin_num] |= 0b1001 << PORT_PCR_IRQC_SHIFT;
 634              		.loc 1 159 0
 635 00e4 FB69     		ldr	r3, [r7, #28]
 636 00e6 3A6A     		ldr	r2, [r7, #32]
 637 00e8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 638 00ec 43F41021 		orr	r1, r3, #589824
 639 00f0 FB69     		ldr	r3, [r7, #28]
 640 00f2 3A6A     		ldr	r2, [r7, #32]
 641 00f4 43F82210 		str	r1, [r3, r2, lsl #2]
 160:../source/gpio.c **** 				break;
 642              		.loc 1 160 0
 643 00f8 2AE0     		b	.L33
 644              	.L30:
 161:../source/gpio.c **** 			case GPIO_IRQ_MODE_FALLING_EDGE:
 162:../source/gpio.c **** 				port->PCR[pin_num] &= ~(0b1111 << PORT_PCR_IRQC_SHIFT);
 645              		.loc 1 162 0
 646 00fa FB69     		ldr	r3, [r7, #28]
 647 00fc 3A6A     		ldr	r2, [r7, #32]
 648 00fe 53F82230 		ldr	r3, [r3, r2, lsl #2]
 649 0102 23F47021 		bic	r1, r3, #983040
 650 0106 FB69     		ldr	r3, [r7, #28]
 651 0108 3A6A     		ldr	r2, [r7, #32]
 652 010a 43F82210 		str	r1, [r3, r2, lsl #2]
 163:../source/gpio.c **** 				port->PCR[pin_num] |= 0b1010 << PORT_PCR_IRQC_SHIFT;
 653              		.loc 1 163 0
 654 010e FB69     		ldr	r3, [r7, #28]
 655 0110 3A6A     		ldr	r2, [r7, #32]
 656 0112 53F82230 		ldr	r3, [r3, r2, lsl #2]
 657 0116 43F42021 		orr	r1, r3, #655360
 658 011a FB69     		ldr	r3, [r7, #28]
 659 011c 3A6A     		ldr	r2, [r7, #32]
 660 011e 43F82210 		str	r1, [r3, r2, lsl #2]
 164:../source/gpio.c **** 				break;
 661              		.loc 1 164 0
 662 0122 15E0     		b	.L33
 663              	.L31:
 165:../source/gpio.c **** 			case GPIO_IRQ_MODE_BOTH_EDGES:
 166:../source/gpio.c **** 				port->PCR[pin_num] &= ~(0b1111 << PORT_PCR_IRQC_SHIFT);
 664              		.loc 1 166 0
 665 0124 FB69     		ldr	r3, [r7, #28]
 666 0126 3A6A     		ldr	r2, [r7, #32]
 667 0128 53F82230 		ldr	r3, [r3, r2, lsl #2]
 668 012c 23F47021 		bic	r1, r3, #983040
 669 0130 FB69     		ldr	r3, [r7, #28]
 670 0132 3A6A     		ldr	r2, [r7, #32]
 671 0134 43F82210 		str	r1, [r3, r2, lsl #2]
 167:../source/gpio.c **** 				port->PCR[pin_num] |= 0b1011 << PORT_PCR_IRQC_SHIFT;
 672              		.loc 1 167 0
 673 0138 FB69     		ldr	r3, [r7, #28]
 674 013a 3A6A     		ldr	r2, [r7, #32]
 675 013c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 676 0140 43F43021 		orr	r1, r3, #720896
 677 0144 FB69     		ldr	r3, [r7, #28]
 678 0146 3A6A     		ldr	r2, [r7, #32]
 679 0148 43F82210 		str	r1, [r3, r2, lsl #2]
 168:../source/gpio.c **** 				break;
 680              		.loc 1 168 0
 681 014c 00E0     		b	.L33
 682              	.L35:
 169:../source/gpio.c **** 			case GPIO_IRQ_CANT_MODES:
 170:../source/gpio.c **** 				break;
 171:../source/gpio.c **** 			default:
 172:../source/gpio.c **** 				break;
 683              		.loc 1 172 0
 684 014e 00BF     		nop
 685              	.L33:
 173:../source/gpio.c **** 		}
 174:../source/gpio.c **** 	return true;
 686              		.loc 1 174 0
 687 0150 0123     		movs	r3, #1
 175:../source/gpio.c **** }
 688              		.loc 1 175 0
 689 0152 1846     		mov	r0, r3
 690 0154 2837     		adds	r7, r7, #40
 691              		.cfi_def_cfa_offset 16
 692 0156 BD46     		mov	sp, r7
 693              		.cfi_def_cfa_register 13
 694              		@ sp needed
 695 0158 B0BD     		pop	{r4, r5, r7, pc}
 696              	.L37:
 697 015a 00BF     		.align	2
 698              	.L36:
 699 015c 00000000 		.word	pin_ports_activated
 700 0160 00000000 		.word	callbacks
 701 0164 00000000 		.word	.LC0
 702 0168 00000000 		.word	IRQn_ports
 703              		.cfi_endproc
 704              	.LFE127:
 706              		.section	.text.gpioDisableIRQ,"ax",%progbits
 707              		.align	1
 708              		.global	gpioDisableIRQ
 709              		.syntax unified
 710              		.thumb
 711              		.thumb_func
 712              		.fpu fpv4-sp-d16
 714              	gpioDisableIRQ:
 715              	.LFB128:
 176:../source/gpio.c **** 
 177:../source/gpio.c **** void gpioDisableIRQ(pin_t pin){
 716              		.loc 1 177 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 16
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720 0000 80B5     		push	{r7, lr}
 721              		.cfi_def_cfa_offset 8
 722              		.cfi_offset 7, -8
 723              		.cfi_offset 14, -4
 724 0002 84B0     		sub	sp, sp, #16
 725              		.cfi_def_cfa_offset 24
 726 0004 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 728 0006 0346     		mov	r3, r0
 729 0008 FB71     		strb	r3, [r7, #7]
 178:../source/gpio.c **** /*****************************************************************
 179:../source/gpio.c ****  * @brief Disables a previosuly activated interrupt pin
 180:../source/gpio.c ****  * @param pin the pin whose IRQ mode you wish to dishable (according PORTNUM2PIN)
 181:../source/gpio.c ****  *****************************************************************/
 182:../source/gpio.c **** 	uint32_t port_num = PIN2PORT(pin);
 730              		.loc 1 182 0
 731 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 732 000c 5B09     		lsrs	r3, r3, #5
 733 000e DBB2     		uxtb	r3, r3
 734 0010 03F00703 		and	r3, r3, #7
 735 0014 FB60     		str	r3, [r7, #12]
 183:../source/gpio.c **** 	uint32_t pin_num = PIN2NUM(pin);
 736              		.loc 1 183 0
 737 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 738 0018 03F01F03 		and	r3, r3, #31
 739 001c BB60     		str	r3, [r7, #8]
 184:../source/gpio.c **** 	pin_ports_activated[port_num] &= ~(PIN_IRQ_MASK<<pin_num);
 740              		.loc 1 184 0
 741 001e 144A     		ldr	r2, .L40
 742 0020 FB68     		ldr	r3, [r7, #12]
 743 0022 52F82330 		ldr	r3, [r2, r3, lsl #2]
 744 0026 0121     		movs	r1, #1
 745 0028 BA68     		ldr	r2, [r7, #8]
 746 002a 01FA02F2 		lsl	r2, r1, r2
 747 002e D243     		mvns	r2, r2
 748 0030 1A40     		ands	r2, r2, r3
 749 0032 0F49     		ldr	r1, .L40
 750 0034 FB68     		ldr	r3, [r7, #12]
 751 0036 41F82320 		str	r2, [r1, r3, lsl #2]
 185:../source/gpio.c **** 	callbacks[port_num][pin_num] = 0;
 752              		.loc 1 185 0
 753 003a 0E49     		ldr	r1, .L40+4
 754 003c FB68     		ldr	r3, [r7, #12]
 755 003e 5A01     		lsls	r2, r3, #5
 756 0040 BB68     		ldr	r3, [r7, #8]
 757 0042 1344     		add	r3, r3, r2
 758 0044 0022     		movs	r2, #0
 759 0046 41F82320 		str	r2, [r1, r3, lsl #2]
 186:../source/gpio.c **** 	__NVIC_DisableIRQ(IRQn_ports[port_num]);
 760              		.loc 1 186 0
 761 004a 0B4A     		ldr	r2, .L40+8
 762 004c FB68     		ldr	r3, [r7, #12]
 763 004e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 764 0052 1846     		mov	r0, r3
 765 0054 FFF7FEFF 		bl	__NVIC_DisableIRQ
 187:../source/gpio.c **** 	__NVIC_ClearPendingIRQ(IRQn_ports[port_num]);
 766              		.loc 1 187 0
 767 0058 074A     		ldr	r2, .L40+8
 768 005a FB68     		ldr	r3, [r7, #12]
 769 005c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 770 0060 1846     		mov	r0, r3
 771 0062 FFF7FEFF 		bl	__NVIC_ClearPendingIRQ
 188:../source/gpio.c **** 	return;
 772              		.loc 1 188 0
 773 0066 00BF     		nop
 189:../source/gpio.c **** }
 774              		.loc 1 189 0
 775 0068 1037     		adds	r7, r7, #16
 776              		.cfi_def_cfa_offset 8
 777 006a BD46     		mov	sp, r7
 778              		.cfi_def_cfa_register 13
 779              		@ sp needed
 780 006c 80BD     		pop	{r7, pc}
 781              	.L41:
 782 006e 00BF     		.align	2
 783              	.L40:
 784 0070 00000000 		.word	pin_ports_activated
 785 0074 00000000 		.word	callbacks
 786 0078 00000000 		.word	IRQn_ports
 787              		.cfi_endproc
 788              	.LFE128:
 790              		.section	.text.PORTA_IRQHandler,"ax",%progbits
 791              		.align	1
 792              		.global	PORTA_IRQHandler
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv4-sp-d16
 798              	PORTA_IRQHandler:
 799              	.LFB129:
 190:../source/gpio.c **** 
 191:../source/gpio.c **** //////////////////////////////////////////////////////////////////
 192:../source/gpio.c **** //////////////////////////////////////////////////////////////////
 193:../source/gpio.c **** //							HANDLERS							//
 194:../source/gpio.c **** //////////////////////////////////////////////////////////////////
 195:../source/gpio.c **** //////////////////////////////////////////////////////////////////
 196:../source/gpio.c **** 
 197:../source/gpio.c **** void PORTA_IRQHandler(void){
 800              		.loc 1 197 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 8
 803              		@ frame_needed = 1, uses_anonymous_args = 0
 804 0000 80B5     		push	{r7, lr}
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 7, -8
 807              		.cfi_offset 14, -4
 808 0002 82B0     		sub	sp, sp, #8
 809              		.cfi_def_cfa_offset 16
 810 0004 00AF     		add	r7, sp, #0
 811              		.cfi_def_cfa_register 7
 812              	.LBB2:
 198:../source/gpio.c **** 	for(int i=0; i<32; i++) {
 813              		.loc 1 198 0
 814 0006 0023     		movs	r3, #0
 815 0008 7B60     		str	r3, [r7, #4]
 816 000a 16E0     		b	.L43
 817              	.L45:
 199:../source/gpio.c **** 		//if(pin_ports_activated[PA][i]==PIN_IRQ_ENABLED){
 200:../source/gpio.c **** 		if(((PIN_IRQ_MASK<<i) & pin_ports_activated[PA]) != 0x00){
 818              		.loc 1 200 0
 819 000c 0122     		movs	r2, #1
 820 000e 7B68     		ldr	r3, [r7, #4]
 821 0010 02FA03F3 		lsl	r3, r2, r3
 822 0014 1A46     		mov	r2, r3
 823 0016 0C4B     		ldr	r3, .L47
 824 0018 1B68     		ldr	r3, [r3]
 825 001a 1340     		ands	r3, r3, r2
 826 001c 002B     		cmp	r3, #0
 827 001e 09D0     		beq	.L44
 201:../source/gpio.c **** 		// Agarro La pascara 0x00000001 y la shifteo i lugares hacia la iquierda, 
 202:../source/gpio.c **** 		//	aplico una and con el registro de 32 bits del puerto en cuestion, y me fijo 
 203:../source/gpio.c **** 		// si el resultado es distinto de cero, es decir, me fijo si el pin 'i' esta activado como 
 204:../source/gpio.c **** 		// interrupcion.
 205:../source/gpio.c **** 			PORT_ClearInterruptFlag(PA,i);
 828              		.loc 1 205 0
 829 0020 7B68     		ldr	r3, [r7, #4]
 830 0022 1946     		mov	r1, r3
 831 0024 0020     		movs	r0, #0
 832 0026 FFF7FEFF 		bl	PORT_ClearInterruptFlag
 206:../source/gpio.c **** 			callbacks[PA][i]();
 833              		.loc 1 206 0
 834 002a 084A     		ldr	r2, .L47+4
 835 002c 7B68     		ldr	r3, [r7, #4]
 836 002e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 837 0032 9847     		blx	r3
 838              	.LVL0:
 839              	.L44:
 198:../source/gpio.c **** 		//if(pin_ports_activated[PA][i]==PIN_IRQ_ENABLED){
 840              		.loc 1 198 0 discriminator 2
 841 0034 7B68     		ldr	r3, [r7, #4]
 842 0036 0133     		adds	r3, r3, #1
 843 0038 7B60     		str	r3, [r7, #4]
 844              	.L43:
 198:../source/gpio.c **** 		//if(pin_ports_activated[PA][i]==PIN_IRQ_ENABLED){
 845              		.loc 1 198 0 is_stmt 0 discriminator 1
 846 003a 7B68     		ldr	r3, [r7, #4]
 847 003c 1F2B     		cmp	r3, #31
 848 003e E5DD     		ble	.L45
 849              	.LBE2:
 207:../source/gpio.c **** 		}
 208:../source/gpio.c **** 	}
 209:../source/gpio.c **** 	return;
 850              		.loc 1 209 0 is_stmt 1
 851 0040 00BF     		nop
 210:../source/gpio.c **** }
 852              		.loc 1 210 0
 853 0042 0837     		adds	r7, r7, #8
 854              		.cfi_def_cfa_offset 8
 855 0044 BD46     		mov	sp, r7
 856              		.cfi_def_cfa_register 13
 857              		@ sp needed
 858 0046 80BD     		pop	{r7, pc}
 859              	.L48:
 860              		.align	2
 861              	.L47:
 862 0048 00000000 		.word	pin_ports_activated
 863 004c 00000000 		.word	callbacks
 864              		.cfi_endproc
 865              	.LFE129:
 867              		.section	.text.PORTB_IRQHandler,"ax",%progbits
 868              		.align	1
 869              		.global	PORTB_IRQHandler
 870              		.syntax unified
 871              		.thumb
 872              		.thumb_func
 873              		.fpu fpv4-sp-d16
 875              	PORTB_IRQHandler:
 876              	.LFB130:
 211:../source/gpio.c **** 
 212:../source/gpio.c **** void PORTB_IRQHandler(void){
 877              		.loc 1 212 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 8
 880              		@ frame_needed = 1, uses_anonymous_args = 0
 881 0000 80B5     		push	{r7, lr}
 882              		.cfi_def_cfa_offset 8
 883              		.cfi_offset 7, -8
 884              		.cfi_offset 14, -4
 885 0002 82B0     		sub	sp, sp, #8
 886              		.cfi_def_cfa_offset 16
 887 0004 00AF     		add	r7, sp, #0
 888              		.cfi_def_cfa_register 7
 889              	.LBB3:
 213:../source/gpio.c **** 	for(int i=0; i<32; i++) {
 890              		.loc 1 213 0
 891 0006 0023     		movs	r3, #0
 892 0008 7B60     		str	r3, [r7, #4]
 893 000a 17E0     		b	.L50
 894              	.L52:
 214:../source/gpio.c **** 		//if(pin_ports_activated[PB][i]==PIN_IRQ_ENABLED){
 215:../source/gpio.c **** 		if(((PIN_IRQ_MASK<<i) & pin_ports_activated[PB]) != 0x00){
 895              		.loc 1 215 0
 896 000c 0122     		movs	r2, #1
 897 000e 7B68     		ldr	r3, [r7, #4]
 898 0010 02FA03F3 		lsl	r3, r2, r3
 899 0014 1A46     		mov	r2, r3
 900 0016 0D4B     		ldr	r3, .L54
 901 0018 5B68     		ldr	r3, [r3, #4]
 902 001a 1340     		ands	r3, r3, r2
 903 001c 002B     		cmp	r3, #0
 904 001e 0AD0     		beq	.L51
 216:../source/gpio.c **** 		// Agarro La pascara 0x00000001 y la shifteo i lugares hacia la iquierda, 
 217:../source/gpio.c **** 		//	aplico una and con el registro de 32 bits del puerto en cuestion, y me fijo 
 218:../source/gpio.c **** 		// si el resultado es distinto de cero, es decir, me fijo si el pin 'i' esta activado como 
 219:../source/gpio.c **** 		// interrupcion.
 220:../source/gpio.c **** 			PORT_ClearInterruptFlag(PB,i);
 905              		.loc 1 220 0
 906 0020 7B68     		ldr	r3, [r7, #4]
 907 0022 1946     		mov	r1, r3
 908 0024 0120     		movs	r0, #1
 909 0026 FFF7FEFF 		bl	PORT_ClearInterruptFlag
 221:../source/gpio.c **** 			callbacks[PB][i]();
 910              		.loc 1 221 0
 911 002a 094A     		ldr	r2, .L54+4
 912 002c 7B68     		ldr	r3, [r7, #4]
 913 002e 2033     		adds	r3, r3, #32
 914 0030 52F82330 		ldr	r3, [r2, r3, lsl #2]
 915 0034 9847     		blx	r3
 916              	.LVL1:
 917              	.L51:
 213:../source/gpio.c **** 		//if(pin_ports_activated[PB][i]==PIN_IRQ_ENABLED){
 918              		.loc 1 213 0 discriminator 2
 919 0036 7B68     		ldr	r3, [r7, #4]
 920 0038 0133     		adds	r3, r3, #1
 921 003a 7B60     		str	r3, [r7, #4]
 922              	.L50:
 213:../source/gpio.c **** 		//if(pin_ports_activated[PB][i]==PIN_IRQ_ENABLED){
 923              		.loc 1 213 0 is_stmt 0 discriminator 1
 924 003c 7B68     		ldr	r3, [r7, #4]
 925 003e 1F2B     		cmp	r3, #31
 926 0040 E4DD     		ble	.L52
 927              	.LBE3:
 222:../source/gpio.c **** 		}
 223:../source/gpio.c **** 	}
 224:../source/gpio.c **** 	return;
 928              		.loc 1 224 0 is_stmt 1
 929 0042 00BF     		nop
 225:../source/gpio.c **** }
 930              		.loc 1 225 0
 931 0044 0837     		adds	r7, r7, #8
 932              		.cfi_def_cfa_offset 8
 933 0046 BD46     		mov	sp, r7
 934              		.cfi_def_cfa_register 13
 935              		@ sp needed
 936 0048 80BD     		pop	{r7, pc}
 937              	.L55:
 938 004a 00BF     		.align	2
 939              	.L54:
 940 004c 00000000 		.word	pin_ports_activated
 941 0050 00000000 		.word	callbacks
 942              		.cfi_endproc
 943              	.LFE130:
 945              		.section	.text.PORTC_IRQHandler,"ax",%progbits
 946              		.align	1
 947              		.global	PORTC_IRQHandler
 948              		.syntax unified
 949              		.thumb
 950              		.thumb_func
 951              		.fpu fpv4-sp-d16
 953              	PORTC_IRQHandler:
 954              	.LFB131:
 226:../source/gpio.c **** 
 227:../source/gpio.c **** void PORTC_IRQHandler(void){
 955              		.loc 1 227 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 8
 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959 0000 80B5     		push	{r7, lr}
 960              		.cfi_def_cfa_offset 8
 961              		.cfi_offset 7, -8
 962              		.cfi_offset 14, -4
 963 0002 82B0     		sub	sp, sp, #8
 964              		.cfi_def_cfa_offset 16
 965 0004 00AF     		add	r7, sp, #0
 966              		.cfi_def_cfa_register 7
 967              	.LBB4:
 228:../source/gpio.c **** 	for(int i=0; i<32; i++) {
 968              		.loc 1 228 0
 969 0006 0023     		movs	r3, #0
 970 0008 7B60     		str	r3, [r7, #4]
 971 000a 17E0     		b	.L57
 972              	.L59:
 229:../source/gpio.c **** 		//if(pin_ports_activated[PC][i]==PIN_IRQ_ENABLED){
 230:../source/gpio.c **** 		if(((PIN_IRQ_MASK<<i) & pin_ports_activated[PC]) != 0x00){
 973              		.loc 1 230 0
 974 000c 0122     		movs	r2, #1
 975 000e 7B68     		ldr	r3, [r7, #4]
 976 0010 02FA03F3 		lsl	r3, r2, r3
 977 0014 1A46     		mov	r2, r3
 978 0016 0D4B     		ldr	r3, .L61
 979 0018 9B68     		ldr	r3, [r3, #8]
 980 001a 1340     		ands	r3, r3, r2
 981 001c 002B     		cmp	r3, #0
 982 001e 0AD0     		beq	.L58
 231:../source/gpio.c **** 		// Agarro La pascara 0x00000001 y la shifteo i lugares hacia la iquierda, 
 232:../source/gpio.c **** 		//	aplico una and con el registro de 32 bits del puerto en cuestion, y me fijo 
 233:../source/gpio.c **** 		// si el resultado es distinto de cero, es decir, me fijo si el pin 'i' esta activado como 
 234:../source/gpio.c **** 		// interrupcion.
 235:../source/gpio.c **** 			PORT_ClearInterruptFlag(PC,i);
 983              		.loc 1 235 0
 984 0020 7B68     		ldr	r3, [r7, #4]
 985 0022 1946     		mov	r1, r3
 986 0024 0220     		movs	r0, #2
 987 0026 FFF7FEFF 		bl	PORT_ClearInterruptFlag
 236:../source/gpio.c **** 			callbacks[PC][i]();
 988              		.loc 1 236 0
 989 002a 094A     		ldr	r2, .L61+4
 990 002c 7B68     		ldr	r3, [r7, #4]
 991 002e 4033     		adds	r3, r3, #64
 992 0030 52F82330 		ldr	r3, [r2, r3, lsl #2]
 993 0034 9847     		blx	r3
 994              	.LVL2:
 995              	.L58:
 228:../source/gpio.c **** 		//if(pin_ports_activated[PC][i]==PIN_IRQ_ENABLED){
 996              		.loc 1 228 0 discriminator 2
 997 0036 7B68     		ldr	r3, [r7, #4]
 998 0038 0133     		adds	r3, r3, #1
 999 003a 7B60     		str	r3, [r7, #4]
 1000              	.L57:
 228:../source/gpio.c **** 		//if(pin_ports_activated[PC][i]==PIN_IRQ_ENABLED){
 1001              		.loc 1 228 0 is_stmt 0 discriminator 1
 1002 003c 7B68     		ldr	r3, [r7, #4]
 1003 003e 1F2B     		cmp	r3, #31
 1004 0040 E4DD     		ble	.L59
 1005              	.LBE4:
 237:../source/gpio.c **** 		}
 238:../source/gpio.c **** 	}
 239:../source/gpio.c **** 	return;
 1006              		.loc 1 239 0 is_stmt 1
 1007 0042 00BF     		nop
 240:../source/gpio.c **** }
 1008              		.loc 1 240 0
 1009 0044 0837     		adds	r7, r7, #8
 1010              		.cfi_def_cfa_offset 8
 1011 0046 BD46     		mov	sp, r7
 1012              		.cfi_def_cfa_register 13
 1013              		@ sp needed
 1014 0048 80BD     		pop	{r7, pc}
 1015              	.L62:
 1016 004a 00BF     		.align	2
 1017              	.L61:
 1018 004c 00000000 		.word	pin_ports_activated
 1019 0050 00000000 		.word	callbacks
 1020              		.cfi_endproc
 1021              	.LFE131:
 1023              		.section	.text.PORTD_IRQHandler,"ax",%progbits
 1024              		.align	1
 1025              		.global	PORTD_IRQHandler
 1026              		.syntax unified
 1027              		.thumb
 1028              		.thumb_func
 1029              		.fpu fpv4-sp-d16
 1031              	PORTD_IRQHandler:
 1032              	.LFB132:
 241:../source/gpio.c **** 
 242:../source/gpio.c **** void PORTD_IRQHandler(void){
 1033              		.loc 1 242 0
 1034              		.cfi_startproc
 1035              		@ args = 0, pretend = 0, frame = 8
 1036              		@ frame_needed = 1, uses_anonymous_args = 0
 1037 0000 80B5     		push	{r7, lr}
 1038              		.cfi_def_cfa_offset 8
 1039              		.cfi_offset 7, -8
 1040              		.cfi_offset 14, -4
 1041 0002 82B0     		sub	sp, sp, #8
 1042              		.cfi_def_cfa_offset 16
 1043 0004 00AF     		add	r7, sp, #0
 1044              		.cfi_def_cfa_register 7
 1045              	.LBB5:
 243:../source/gpio.c **** 	for(int i=0; i<32; i++) {
 1046              		.loc 1 243 0
 1047 0006 0023     		movs	r3, #0
 1048 0008 7B60     		str	r3, [r7, #4]
 1049 000a 17E0     		b	.L64
 1050              	.L66:
 244:../source/gpio.c **** 		//if(pin_ports_activated[PD][i]==PIN_IRQ_ENABLED){
 245:../source/gpio.c **** 		if(((PIN_IRQ_MASK<<i) & pin_ports_activated[PD]) != 0x00){
 1051              		.loc 1 245 0
 1052 000c 0122     		movs	r2, #1
 1053 000e 7B68     		ldr	r3, [r7, #4]
 1054 0010 02FA03F3 		lsl	r3, r2, r3
 1055 0014 1A46     		mov	r2, r3
 1056 0016 0D4B     		ldr	r3, .L68
 1057 0018 DB68     		ldr	r3, [r3, #12]
 1058 001a 1340     		ands	r3, r3, r2
 1059 001c 002B     		cmp	r3, #0
 1060 001e 0AD0     		beq	.L65
 246:../source/gpio.c **** 		// Agarro La pascara 0x00000001 y la shifteo i lugares hacia la iquierda, 
 247:../source/gpio.c **** 		//	aplico una and con el registro de 32 bits del puerto en cuestion, y me fijo 
 248:../source/gpio.c **** 		// si el resultado es distinto de cero, es decir, me fijo si el pin 'i' esta activado como 
 249:../source/gpio.c **** 		// interrupcion.
 250:../source/gpio.c **** 			PORT_ClearInterruptFlag(PD,i);
 1061              		.loc 1 250 0
 1062 0020 7B68     		ldr	r3, [r7, #4]
 1063 0022 1946     		mov	r1, r3
 1064 0024 0320     		movs	r0, #3
 1065 0026 FFF7FEFF 		bl	PORT_ClearInterruptFlag
 251:../source/gpio.c **** 			callbacks[PD][i]();
 1066              		.loc 1 251 0
 1067 002a 094A     		ldr	r2, .L68+4
 1068 002c 7B68     		ldr	r3, [r7, #4]
 1069 002e 6033     		adds	r3, r3, #96
 1070 0030 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1071 0034 9847     		blx	r3
 1072              	.LVL3:
 1073              	.L65:
 243:../source/gpio.c **** 		//if(pin_ports_activated[PD][i]==PIN_IRQ_ENABLED){
 1074              		.loc 1 243 0 discriminator 2
 1075 0036 7B68     		ldr	r3, [r7, #4]
 1076 0038 0133     		adds	r3, r3, #1
 1077 003a 7B60     		str	r3, [r7, #4]
 1078              	.L64:
 243:../source/gpio.c **** 		//if(pin_ports_activated[PD][i]==PIN_IRQ_ENABLED){
 1079              		.loc 1 243 0 is_stmt 0 discriminator 1
 1080 003c 7B68     		ldr	r3, [r7, #4]
 1081 003e 1F2B     		cmp	r3, #31
 1082 0040 E4DD     		ble	.L66
 1083              	.LBE5:
 252:../source/gpio.c **** 		}
 253:../source/gpio.c **** 	}
 254:../source/gpio.c **** 	return;
 1084              		.loc 1 254 0 is_stmt 1
 1085 0042 00BF     		nop
 255:../source/gpio.c **** }
 1086              		.loc 1 255 0
 1087 0044 0837     		adds	r7, r7, #8
 1088              		.cfi_def_cfa_offset 8
 1089 0046 BD46     		mov	sp, r7
 1090              		.cfi_def_cfa_register 13
 1091              		@ sp needed
 1092 0048 80BD     		pop	{r7, pc}
 1093              	.L69:
 1094 004a 00BF     		.align	2
 1095              	.L68:
 1096 004c 00000000 		.word	pin_ports_activated
 1097 0050 00000000 		.word	callbacks
 1098              		.cfi_endproc
 1099              	.LFE132:
 1101              		.section	.text.PORTE_IRQHandler,"ax",%progbits
 1102              		.align	1
 1103              		.global	PORTE_IRQHandler
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1107              		.fpu fpv4-sp-d16
 1109              	PORTE_IRQHandler:
 1110              	.LFB133:
 256:../source/gpio.c **** 
 257:../source/gpio.c **** void PORTE_IRQHandler(void){
 1111              		.loc 1 257 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 8
 1114              		@ frame_needed = 1, uses_anonymous_args = 0
 1115 0000 80B5     		push	{r7, lr}
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 7, -8
 1118              		.cfi_offset 14, -4
 1119 0002 82B0     		sub	sp, sp, #8
 1120              		.cfi_def_cfa_offset 16
 1121 0004 00AF     		add	r7, sp, #0
 1122              		.cfi_def_cfa_register 7
 1123              	.LBB6:
 258:../source/gpio.c **** 	for(int i=0; i<32; i++) {
 1124              		.loc 1 258 0
 1125 0006 0023     		movs	r3, #0
 1126 0008 7B60     		str	r3, [r7, #4]
 1127 000a 17E0     		b	.L71
 1128              	.L73:
 259:../source/gpio.c **** 		//if(pin_ports_activated[PE][i]==PIN_IRQ_ENABLED){
 260:../source/gpio.c **** 		if(((PIN_IRQ_MASK<<i) & pin_ports_activated[PE]) != 0x00){
 1129              		.loc 1 260 0
 1130 000c 0122     		movs	r2, #1
 1131 000e 7B68     		ldr	r3, [r7, #4]
 1132 0010 02FA03F3 		lsl	r3, r2, r3
 1133 0014 1A46     		mov	r2, r3
 1134 0016 0D4B     		ldr	r3, .L75
 1135 0018 1B69     		ldr	r3, [r3, #16]
 1136 001a 1340     		ands	r3, r3, r2
 1137 001c 002B     		cmp	r3, #0
 1138 001e 0AD0     		beq	.L72
 261:../source/gpio.c **** 		// Agarro La pascara 0x00000001 y la shifteo i lugares hacia la iquierda, 
 262:../source/gpio.c **** 		//	aplico una and con el registro de 32 bits del puerto en cuestion, y me fijo 
 263:../source/gpio.c **** 		// si el resultado es distinto de cero, es decir, me fijo si el pin 'i' esta activado como 
 264:../source/gpio.c **** 		// interrupcion.
 265:../source/gpio.c **** 			PORT_ClearInterruptFlag(PE,i);
 1139              		.loc 1 265 0
 1140 0020 7B68     		ldr	r3, [r7, #4]
 1141 0022 1946     		mov	r1, r3
 1142 0024 0420     		movs	r0, #4
 1143 0026 FFF7FEFF 		bl	PORT_ClearInterruptFlag
 266:../source/gpio.c **** 			callbacks[PE][i]();
 1144              		.loc 1 266 0
 1145 002a 094A     		ldr	r2, .L75+4
 1146 002c 7B68     		ldr	r3, [r7, #4]
 1147 002e 8033     		adds	r3, r3, #128
 1148 0030 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1149 0034 9847     		blx	r3
 1150              	.LVL4:
 1151              	.L72:
 258:../source/gpio.c **** 		//if(pin_ports_activated[PE][i]==PIN_IRQ_ENABLED){
 1152              		.loc 1 258 0 discriminator 2
 1153 0036 7B68     		ldr	r3, [r7, #4]
 1154 0038 0133     		adds	r3, r3, #1
 1155 003a 7B60     		str	r3, [r7, #4]
 1156              	.L71:
 258:../source/gpio.c **** 		//if(pin_ports_activated[PE][i]==PIN_IRQ_ENABLED){
 1157              		.loc 1 258 0 is_stmt 0 discriminator 1
 1158 003c 7B68     		ldr	r3, [r7, #4]
 1159 003e 1F2B     		cmp	r3, #31
 1160 0040 E4DD     		ble	.L73
 1161              	.LBE6:
 267:../source/gpio.c **** 		}
 268:../source/gpio.c **** 	}
 269:../source/gpio.c **** 	return;
 1162              		.loc 1 269 0 is_stmt 1
 1163 0042 00BF     		nop
 270:../source/gpio.c **** }
 1164              		.loc 1 270 0
 1165 0044 0837     		adds	r7, r7, #8
 1166              		.cfi_def_cfa_offset 8
 1167 0046 BD46     		mov	sp, r7
 1168              		.cfi_def_cfa_register 13
 1169              		@ sp needed
 1170 0048 80BD     		pop	{r7, pc}
 1171              	.L76:
 1172 004a 00BF     		.align	2
 1173              	.L75:
 1174 004c 00000000 		.word	pin_ports_activated
 1175 0050 00000000 		.word	callbacks
 1176              		.cfi_endproc
 1177              	.LFE133:
 1179              		.section	.text.PORT_ClearInterruptFlag,"ax",%progbits
 1180              		.align	1
 1181              		.syntax unified
 1182              		.thumb
 1183              		.thumb_func
 1184              		.fpu fpv4-sp-d16
 1186              	PORT_ClearInterruptFlag:
 1187              	.LFB134:
 271:../source/gpio.c **** 
 272:../source/gpio.c **** //////////////////////////////////////////////////////////////////
 273:../source/gpio.c **** //////////////////////////////////////////////////////////////////
 274:../source/gpio.c **** //					LOCAL FUNCTION DEFINITIONS					//
 275:../source/gpio.c **** //////////////////////////////////////////////////////////////////
 276:../source/gpio.c **** //////////////////////////////////////////////////////////////////
 277:../source/gpio.c **** 
 278:../source/gpio.c **** void PORT_ClearInterruptFlag(uint32_t port_num, uint32_t pin_num) {
 1188              		.loc 1 278 0
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 32
 1191              		@ frame_needed = 1, uses_anonymous_args = 0
 1192              		@ link register save eliminated.
 1193 0000 B0B4     		push	{r4, r5, r7}
 1194              		.cfi_def_cfa_offset 12
 1195              		.cfi_offset 4, -12
 1196              		.cfi_offset 5, -8
 1197              		.cfi_offset 7, -4
 1198 0002 89B0     		sub	sp, sp, #36
 1199              		.cfi_def_cfa_offset 48
 1200 0004 00AF     		add	r7, sp, #0
 1201              		.cfi_def_cfa_register 7
 1202 0006 7860     		str	r0, [r7, #4]
 1203 0008 3960     		str	r1, [r7]
 279:../source/gpio.c **** 	PORT_Type * addr_arrays[] = PORT_BASE_PTRS;
 1204              		.loc 1 279 0
 1205 000a 0F4B     		ldr	r3, .L79
 1206 000c 07F10804 		add	r4, r7, #8
 1207 0010 1D46     		mov	r5, r3
 1208 0012 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1209 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1210 0016 2B68     		ldr	r3, [r5]
 1211 0018 2360     		str	r3, [r4]
 280:../source/gpio.c **** 	PORT_Type * port = addr_arrays[port_num];
 1212              		.loc 1 280 0
 1213 001a 7B68     		ldr	r3, [r7, #4]
 1214 001c 9B00     		lsls	r3, r3, #2
 1215 001e 07F12002 		add	r2, r7, #32
 1216 0022 1344     		add	r3, r3, r2
 1217 0024 53F8183C 		ldr	r3, [r3, #-24]
 1218 0028 FB61     		str	r3, [r7, #28]
 281:../source/gpio.c **** 	port->PCR[pin_num] |= PORT_PCR_ISF_MASK;
 1219              		.loc 1 281 0
 1220 002a FB69     		ldr	r3, [r7, #28]
 1221 002c 3A68     		ldr	r2, [r7]
 1222 002e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1223 0032 43F08071 		orr	r1, r3, #16777216
 1224 0036 FB69     		ldr	r3, [r7, #28]
 1225 0038 3A68     		ldr	r2, [r7]
 1226 003a 43F82210 		str	r1, [r3, r2, lsl #2]
 282:../source/gpio.c **** 	return;
 1227              		.loc 1 282 0
 1228 003e 00BF     		nop
 283:../source/gpio.c **** }
 1229              		.loc 1 283 0
 1230 0040 2437     		adds	r7, r7, #36
 1231              		.cfi_def_cfa_offset 12
 1232 0042 BD46     		mov	sp, r7
 1233              		.cfi_def_cfa_register 13
 1234              		@ sp needed
 1235 0044 B0BC     		pop	{r4, r5, r7}
 1236              		.cfi_restore 7
 1237              		.cfi_restore 5
 1238              		.cfi_restore 4
 1239              		.cfi_def_cfa_offset 0
 1240 0046 7047     		bx	lr
 1241              	.L80:
 1242              		.align	2
 1243              	.L79:
 1244 0048 00000000 		.word	.LC0
 1245              		.cfi_endproc
 1246              	.LFE134:
 1248              		.text
 1249              	.Letext0:
 1250              		.file 2 "c:\\nxp\\mcuxpressoide_10.2.0_759\\ide\\tools\\redlib\\include\\sys\\libconfig-arm.h"
 1251              		.file 3 "c:\\nxp\\mcuxpressoide_10.2.0_759\\ide\\tools\\redlib\\include\\stdint.h"
 1252              		.file 4 "../source/gpio.h"
 1253              		.file 5 "C:\\Users\\marth\\Documents\\ITBA\\Labo de micros\\Tps\\FTM_PWM\\CMSIS/core_cm4.h"
 1254              		.file 6 "C:\\Users\\marth\\Documents\\ITBA\\Labo de micros\\Tps\\FTM_PWM\\CMSIS/system_MK64F12.h"
 1255              		.file 7 "C:\\Users\\marth\\Documents\\ITBA\\Labo de micros\\Tps\\FTM_PWM\\CMSIS/MK64F12.h"
DEFINED SYMBOLS
                            *ABS*:00000000 gpio.c
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:18     .data.gpioPtrs:00000000 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:21     .data.gpioPtrs:00000000 gpioPtrs
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:28     .data.portPtrs:00000000 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:31     .data.portPtrs:00000000 portPtrs
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:38     .data.simMasks:00000000 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:41     .data.simMasks:00000000 simMasks
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:48     .data.IRQn_ports:00000000 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:51     .data.IRQn_ports:00000000 IRQn_ports
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:58     .bss.pin_ports_activated:00000000 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:61     .bss.pin_ports_activated:00000000 pin_ports_activated
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:64     .data.sim_ptr:00000000 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:67     .data.sim_ptr:00000000 sim_ptr
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:70     .bss.callbacks:00000000 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:73     .bss.callbacks:00000000 callbacks
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:76     .text.gpioMode:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:83     .text.gpioMode:00000000 gpioMode
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:169    .text.gpioMode:000000a0 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:173    .text.gpioMode:000000b0 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:275    .text.gpioMode:00000164 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:283    .text.gpioWrite:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:290    .text.gpioWrite:00000000 gpioWrite
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:365    .text.gpioWrite:00000068 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:370    .text.gpioToggle:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:377    .text.gpioToggle:00000000 gpioToggle
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:425    .text.gpioToggle:00000040 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:430    .text.gpioRead:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:437    .text.gpioRead:00000000 gpioRead
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:498    .text.gpioRead:00000058 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:503    .rodata:00000000 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:511    .text.gpioIRQ:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:518    .text.gpioIRQ:00000000 gpioIRQ
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:610    .text.gpioIRQ:000000a8 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:615    .text.gpioIRQ:000000bc $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:699    .text.gpioIRQ:0000015c $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:707    .text.gpioDisableIRQ:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:714    .text.gpioDisableIRQ:00000000 gpioDisableIRQ
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:784    .text.gpioDisableIRQ:00000070 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:791    .text.PORTA_IRQHandler:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:798    .text.PORTA_IRQHandler:00000000 PORTA_IRQHandler
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:1186   .text.PORT_ClearInterruptFlag:00000000 PORT_ClearInterruptFlag
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:862    .text.PORTA_IRQHandler:00000048 $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:868    .text.PORTB_IRQHandler:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:875    .text.PORTB_IRQHandler:00000000 PORTB_IRQHandler
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:940    .text.PORTB_IRQHandler:0000004c $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:946    .text.PORTC_IRQHandler:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:953    .text.PORTC_IRQHandler:00000000 PORTC_IRQHandler
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:1018   .text.PORTC_IRQHandler:0000004c $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:1024   .text.PORTD_IRQHandler:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:1031   .text.PORTD_IRQHandler:00000000 PORTD_IRQHandler
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:1096   .text.PORTD_IRQHandler:0000004c $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:1102   .text.PORTE_IRQHandler:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:1109   .text.PORTE_IRQHandler:00000000 PORTE_IRQHandler
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:1174   .text.PORTE_IRQHandler:0000004c $d
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:1180   .text.PORT_ClearInterruptFlag:00000000 $t
C:\Users\marth\AppData\Local\Temp\ccgPOZBs.s:1244   .text.PORT_ClearInterruptFlag:00000048 $d
                           .group:00000000 wm4.0.33db8b643112917ec54934b4f2c2f387
                           .group:00000000 wm4.redlib_version.h.16.f905717e4b3a91dcbdbb631865150df4
                           .group:00000000 wm4.libconfigarm.h.18.1ad1d24f96d0dc8c4cf52dc19b0aa2c7
                           .group:00000000 wm4.stdint.h.30.079ac5d9930c76ab215c1ab68adcbe08
                           .group:00000000 wm4.stdbool.h.15.fddf1cb2402fd739d8e2516677869231
                           .group:00000000 wm4.gpio.h.30.2a4ed1ee8740e2aa65dbbeca21e65486
                           .group:00000000 wm4.MK64F12.h.105.e884e5c80776532d2ec0f5c21e2ea7cb
                           .group:00000000 wm4.core_cm4.h.42.42f38327ee0970d80f60117e6a3ba2b0
                           .group:00000000 wm4.cmsis_gcc.h.36.39970cb43ce4b53c82644a1f9bc2eab9
                           .group:00000000 wm4.core_cm4.h.223.7b48c9958ef5573320c4765074c8b0ce
                           .group:00000000 wm4.system_MK64F12.h.109.c6d21568e03be21b21c922eb7345d6e3
                           .group:00000000 wm4.MK64F12.h.475.cafa8e1e521f96f0b72de286863a6df7

UNDEFINED SYMBOLS
__NVIC_EnableIRQ
__NVIC_ClearPendingIRQ
__NVIC_SetPriority
__NVIC_DisableIRQ
